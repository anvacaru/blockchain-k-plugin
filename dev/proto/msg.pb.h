// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/msg.proto

#ifndef PROTOBUF_proto_2fmsg_2eproto__INCLUDED
#define PROTOBUF_proto_2fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace kframework {
namespace kevm {
namespace extvm {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fmsg_2eproto();
void protobuf_AssignDesc_proto_2fmsg_2eproto();
void protobuf_ShutdownFile_proto_2fmsg_2eproto();

class Account;
class BlockHeader;
class Blockhash;
class CallContext;
class CallResult;
class Code;
class EthereumConfig;
class GetAccount;
class GetBlockhash;
class GetCode;
class GetStorageData;
class Hello;
class IeleConfig;
class LogEntry;
class ModifiedAccount;
class StorageData;
class StorageUpdate;
class VMQuery;

// ===================================================================

class Hello : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.Hello) */ {
 public:
  Hello();
  virtual ~Hello();

  Hello(const Hello& from);

  inline Hello& operator=(const Hello& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Hello& default_instance();

  enum ConfigCase {
    kEthereumConfig = 2,
    kIeleConfig = 3,
    CONFIG_NOT_SET = 0,
  };

  void Swap(Hello* other);

  // implements Message ----------------------------------------------

  inline Hello* New() const { return New(NULL); }

  Hello* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Hello& from);
  void MergeFrom(const Hello& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Hello* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional .org.kframework.kevm.extvm.EthereumConfig ethereumConfig = 2;
  bool has_ethereumconfig() const;
  void clear_ethereumconfig();
  static const int kEthereumConfigFieldNumber = 2;
  const ::org::kframework::kevm::extvm::EthereumConfig& ethereumconfig() const;
  ::org::kframework::kevm::extvm::EthereumConfig* mutable_ethereumconfig();
  ::org::kframework::kevm::extvm::EthereumConfig* release_ethereumconfig();
  void set_allocated_ethereumconfig(::org::kframework::kevm::extvm::EthereumConfig* ethereumconfig);

  // optional .org.kframework.kevm.extvm.IeleConfig ieleConfig = 3;
  bool has_ieleconfig() const;
  void clear_ieleconfig();
  static const int kIeleConfigFieldNumber = 3;
  const ::org::kframework::kevm::extvm::IeleConfig& ieleconfig() const;
  ::org::kframework::kevm::extvm::IeleConfig* mutable_ieleconfig();
  ::org::kframework::kevm::extvm::IeleConfig* release_ieleconfig();
  void set_allocated_ieleconfig(::org::kframework::kevm::extvm::IeleConfig* ieleconfig);

  ConfigCase config_case() const;
  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.Hello)
 private:
  inline void set_has_ethereumconfig();
  inline void set_has_ieleconfig();

  inline bool has_config() const;
  void clear_config();
  inline void clear_has_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  union ConfigUnion {
    ConfigUnion() {}
    ::org::kframework::kevm::extvm::EthereumConfig* ethereumconfig_;
    ::org::kframework::kevm::extvm::IeleConfig* ieleconfig_;
  } config_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static Hello* default_instance_;
};
// -------------------------------------------------------------------

class CallContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.CallContext) */ {
 public:
  CallContext();
  virtual ~CallContext();

  CallContext(const CallContext& from);

  inline CallContext& operator=(const CallContext& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallContext& default_instance();

  enum ConfigCase {
    kEthereumConfig = 8,
    kIeleConfig = 9,
    CONFIG_NOT_SET = 0,
  };

  void Swap(CallContext* other);

  // implements Message ----------------------------------------------

  inline CallContext* New() const { return New(NULL); }

  CallContext* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallContext& from);
  void MergeFrom(const CallContext& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes callerAddr = 1;
  void clear_calleraddr();
  static const int kCallerAddrFieldNumber = 1;
  const ::std::string& calleraddr() const;
  void set_calleraddr(const ::std::string& value);
  void set_calleraddr(const char* value);
  void set_calleraddr(const void* value, size_t size);
  ::std::string* mutable_calleraddr();
  ::std::string* release_calleraddr();
  void set_allocated_calleraddr(::std::string* calleraddr);

  // optional bytes recipientAddr = 2;
  void clear_recipientaddr();
  static const int kRecipientAddrFieldNumber = 2;
  const ::std::string& recipientaddr() const;
  void set_recipientaddr(const ::std::string& value);
  void set_recipientaddr(const char* value);
  void set_recipientaddr(const void* value, size_t size);
  ::std::string* mutable_recipientaddr();
  ::std::string* release_recipientaddr();
  void set_allocated_recipientaddr(::std::string* recipientaddr);

  // optional bytes inputData = 3;
  void clear_inputdata();
  static const int kInputDataFieldNumber = 3;
  const ::std::string& inputdata() const;
  void set_inputdata(const ::std::string& value);
  void set_inputdata(const char* value);
  void set_inputdata(const void* value, size_t size);
  ::std::string* mutable_inputdata();
  ::std::string* release_inputdata();
  void set_allocated_inputdata(::std::string* inputdata);

  // optional bytes callValue = 4;
  void clear_callvalue();
  static const int kCallValueFieldNumber = 4;
  const ::std::string& callvalue() const;
  void set_callvalue(const ::std::string& value);
  void set_callvalue(const char* value);
  void set_callvalue(const void* value, size_t size);
  ::std::string* mutable_callvalue();
  ::std::string* release_callvalue();
  void set_allocated_callvalue(::std::string* callvalue);

  // optional bytes gasPrice = 5;
  void clear_gasprice();
  static const int kGasPriceFieldNumber = 5;
  const ::std::string& gasprice() const;
  void set_gasprice(const ::std::string& value);
  void set_gasprice(const char* value);
  void set_gasprice(const void* value, size_t size);
  ::std::string* mutable_gasprice();
  ::std::string* release_gasprice();
  void set_allocated_gasprice(::std::string* gasprice);

  // optional bytes gasProvided = 6;
  void clear_gasprovided();
  static const int kGasProvidedFieldNumber = 6;
  const ::std::string& gasprovided() const;
  void set_gasprovided(const ::std::string& value);
  void set_gasprovided(const char* value);
  void set_gasprovided(const void* value, size_t size);
  ::std::string* mutable_gasprovided();
  ::std::string* release_gasprovided();
  void set_allocated_gasprovided(::std::string* gasprovided);

  // optional .org.kframework.kevm.extvm.BlockHeader blockHeader = 7;
  bool has_blockheader() const;
  void clear_blockheader();
  static const int kBlockHeaderFieldNumber = 7;
  const ::org::kframework::kevm::extvm::BlockHeader& blockheader() const;
  ::org::kframework::kevm::extvm::BlockHeader* mutable_blockheader();
  ::org::kframework::kevm::extvm::BlockHeader* release_blockheader();
  void set_allocated_blockheader(::org::kframework::kevm::extvm::BlockHeader* blockheader);

  // optional .org.kframework.kevm.extvm.EthereumConfig ethereumConfig = 8;
  bool has_ethereumconfig() const;
  void clear_ethereumconfig();
  static const int kEthereumConfigFieldNumber = 8;
  const ::org::kframework::kevm::extvm::EthereumConfig& ethereumconfig() const;
  ::org::kframework::kevm::extvm::EthereumConfig* mutable_ethereumconfig();
  ::org::kframework::kevm::extvm::EthereumConfig* release_ethereumconfig();
  void set_allocated_ethereumconfig(::org::kframework::kevm::extvm::EthereumConfig* ethereumconfig);

  // optional .org.kframework.kevm.extvm.IeleConfig ieleConfig = 9;
  bool has_ieleconfig() const;
  void clear_ieleconfig();
  static const int kIeleConfigFieldNumber = 9;
  const ::org::kframework::kevm::extvm::IeleConfig& ieleconfig() const;
  ::org::kframework::kevm::extvm::IeleConfig* mutable_ieleconfig();
  ::org::kframework::kevm::extvm::IeleConfig* release_ieleconfig();
  void set_allocated_ieleconfig(::org::kframework::kevm::extvm::IeleConfig* ieleconfig);

  ConfigCase config_case() const;
  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.CallContext)
 private:
  inline void set_has_ethereumconfig();
  inline void set_has_ieleconfig();

  inline bool has_config() const;
  void clear_config();
  inline void clear_has_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr calleraddr_;
  ::google::protobuf::internal::ArenaStringPtr recipientaddr_;
  ::google::protobuf::internal::ArenaStringPtr inputdata_;
  ::google::protobuf::internal::ArenaStringPtr callvalue_;
  ::google::protobuf::internal::ArenaStringPtr gasprice_;
  ::google::protobuf::internal::ArenaStringPtr gasprovided_;
  ::org::kframework::kevm::extvm::BlockHeader* blockheader_;
  union ConfigUnion {
    ConfigUnion() {}
    ::org::kframework::kevm::extvm::EthereumConfig* ethereumconfig_;
    ::org::kframework::kevm::extvm::IeleConfig* ieleconfig_;
  } config_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static CallContext* default_instance_;
};
// -------------------------------------------------------------------

class BlockHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.BlockHeader) */ {
 public:
  BlockHeader();
  virtual ~BlockHeader();

  BlockHeader(const BlockHeader& from);

  inline BlockHeader& operator=(const BlockHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockHeader& default_instance();

  void Swap(BlockHeader* other);

  // implements Message ----------------------------------------------

  inline BlockHeader* New() const { return New(NULL); }

  BlockHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockHeader& from);
  void MergeFrom(const BlockHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BlockHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes beneficiary = 1;
  void clear_beneficiary();
  static const int kBeneficiaryFieldNumber = 1;
  const ::std::string& beneficiary() const;
  void set_beneficiary(const ::std::string& value);
  void set_beneficiary(const char* value);
  void set_beneficiary(const void* value, size_t size);
  ::std::string* mutable_beneficiary();
  ::std::string* release_beneficiary();
  void set_allocated_beneficiary(::std::string* beneficiary);

  // optional bytes difficulty = 2;
  void clear_difficulty();
  static const int kDifficultyFieldNumber = 2;
  const ::std::string& difficulty() const;
  void set_difficulty(const ::std::string& value);
  void set_difficulty(const char* value);
  void set_difficulty(const void* value, size_t size);
  ::std::string* mutable_difficulty();
  ::std::string* release_difficulty();
  void set_allocated_difficulty(::std::string* difficulty);

  // optional bytes number = 3;
  void clear_number();
  static const int kNumberFieldNumber = 3;
  const ::std::string& number() const;
  void set_number(const ::std::string& value);
  void set_number(const char* value);
  void set_number(const void* value, size_t size);
  ::std::string* mutable_number();
  ::std::string* release_number();
  void set_allocated_number(::std::string* number);

  // optional bytes gasLimit = 4;
  void clear_gaslimit();
  static const int kGasLimitFieldNumber = 4;
  const ::std::string& gaslimit() const;
  void set_gaslimit(const ::std::string& value);
  void set_gaslimit(const char* value);
  void set_gaslimit(const void* value, size_t size);
  ::std::string* mutable_gaslimit();
  ::std::string* release_gaslimit();
  void set_allocated_gaslimit(::std::string* gaslimit);

  // optional int64 unixTimestamp = 5;
  void clear_unixtimestamp();
  static const int kUnixTimestampFieldNumber = 5;
  ::google::protobuf::int64 unixtimestamp() const;
  void set_unixtimestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.BlockHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr beneficiary_;
  ::google::protobuf::internal::ArenaStringPtr difficulty_;
  ::google::protobuf::internal::ArenaStringPtr number_;
  ::google::protobuf::internal::ArenaStringPtr gaslimit_;
  ::google::protobuf::int64 unixtimestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static BlockHeader* default_instance_;
};
// -------------------------------------------------------------------

class EthereumConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.EthereumConfig) */ {
 public:
  EthereumConfig();
  virtual ~EthereumConfig();

  EthereumConfig(const EthereumConfig& from);

  inline EthereumConfig& operator=(const EthereumConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EthereumConfig& default_instance();

  void Swap(EthereumConfig* other);

  // implements Message ----------------------------------------------

  inline EthereumConfig* New() const { return New(NULL); }

  EthereumConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EthereumConfig& from);
  void MergeFrom(const EthereumConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EthereumConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes frontierBlockNumber = 1;
  void clear_frontierblocknumber();
  static const int kFrontierBlockNumberFieldNumber = 1;
  const ::std::string& frontierblocknumber() const;
  void set_frontierblocknumber(const ::std::string& value);
  void set_frontierblocknumber(const char* value);
  void set_frontierblocknumber(const void* value, size_t size);
  ::std::string* mutable_frontierblocknumber();
  ::std::string* release_frontierblocknumber();
  void set_allocated_frontierblocknumber(::std::string* frontierblocknumber);

  // optional bytes homesteadBlockNumber = 2;
  void clear_homesteadblocknumber();
  static const int kHomesteadBlockNumberFieldNumber = 2;
  const ::std::string& homesteadblocknumber() const;
  void set_homesteadblocknumber(const ::std::string& value);
  void set_homesteadblocknumber(const char* value);
  void set_homesteadblocknumber(const void* value, size_t size);
  ::std::string* mutable_homesteadblocknumber();
  ::std::string* release_homesteadblocknumber();
  void set_allocated_homesteadblocknumber(::std::string* homesteadblocknumber);

  // optional bytes eip150BlockNumber = 3;
  void clear_eip150blocknumber();
  static const int kEip150BlockNumberFieldNumber = 3;
  const ::std::string& eip150blocknumber() const;
  void set_eip150blocknumber(const ::std::string& value);
  void set_eip150blocknumber(const char* value);
  void set_eip150blocknumber(const void* value, size_t size);
  ::std::string* mutable_eip150blocknumber();
  ::std::string* release_eip150blocknumber();
  void set_allocated_eip150blocknumber(::std::string* eip150blocknumber);

  // optional bytes eip160BlockNumber = 4;
  void clear_eip160blocknumber();
  static const int kEip160BlockNumberFieldNumber = 4;
  const ::std::string& eip160blocknumber() const;
  void set_eip160blocknumber(const ::std::string& value);
  void set_eip160blocknumber(const char* value);
  void set_eip160blocknumber(const void* value, size_t size);
  ::std::string* mutable_eip160blocknumber();
  ::std::string* release_eip160blocknumber();
  void set_allocated_eip160blocknumber(::std::string* eip160blocknumber);

  // optional bytes eip161BlockNumber = 5;
  void clear_eip161blocknumber();
  static const int kEip161BlockNumberFieldNumber = 5;
  const ::std::string& eip161blocknumber() const;
  void set_eip161blocknumber(const ::std::string& value);
  void set_eip161blocknumber(const char* value);
  void set_eip161blocknumber(const void* value, size_t size);
  ::std::string* mutable_eip161blocknumber();
  ::std::string* release_eip161blocknumber();
  void set_allocated_eip161blocknumber(::std::string* eip161blocknumber);

  // optional bytes maxCodeSize = 6;
  void clear_maxcodesize();
  static const int kMaxCodeSizeFieldNumber = 6;
  const ::std::string& maxcodesize() const;
  void set_maxcodesize(const ::std::string& value);
  void set_maxcodesize(const char* value);
  void set_maxcodesize(const void* value, size_t size);
  ::std::string* mutable_maxcodesize();
  ::std::string* release_maxcodesize();
  void set_allocated_maxcodesize(::std::string* maxcodesize);

  // optional bytes accountStartNonce = 7;
  void clear_accountstartnonce();
  static const int kAccountStartNonceFieldNumber = 7;
  const ::std::string& accountstartnonce() const;
  void set_accountstartnonce(const ::std::string& value);
  void set_accountstartnonce(const char* value);
  void set_accountstartnonce(const void* value, size_t size);
  ::std::string* mutable_accountstartnonce();
  ::std::string* release_accountstartnonce();
  void set_allocated_accountstartnonce(::std::string* accountstartnonce);

  // optional bytes byzantiumBlockNumber = 8;
  void clear_byzantiumblocknumber();
  static const int kByzantiumBlockNumberFieldNumber = 8;
  const ::std::string& byzantiumblocknumber() const;
  void set_byzantiumblocknumber(const ::std::string& value);
  void set_byzantiumblocknumber(const char* value);
  void set_byzantiumblocknumber(const void* value, size_t size);
  ::std::string* mutable_byzantiumblocknumber();
  ::std::string* release_byzantiumblocknumber();
  void set_allocated_byzantiumblocknumber(::std::string* byzantiumblocknumber);

  // optional bytes constantinopleBlockNumber = 9;
  void clear_constantinopleblocknumber();
  static const int kConstantinopleBlockNumberFieldNumber = 9;
  const ::std::string& constantinopleblocknumber() const;
  void set_constantinopleblocknumber(const ::std::string& value);
  void set_constantinopleblocknumber(const char* value);
  void set_constantinopleblocknumber(const void* value, size_t size);
  ::std::string* mutable_constantinopleblocknumber();
  ::std::string* release_constantinopleblocknumber();
  void set_allocated_constantinopleblocknumber(::std::string* constantinopleblocknumber);

  // optional bytes petersburgBlockNumber = 10;
  void clear_petersburgblocknumber();
  static const int kPetersburgBlockNumberFieldNumber = 10;
  const ::std::string& petersburgblocknumber() const;
  void set_petersburgblocknumber(const ::std::string& value);
  void set_petersburgblocknumber(const char* value);
  void set_petersburgblocknumber(const void* value, size_t size);
  ::std::string* mutable_petersburgblocknumber();
  ::std::string* release_petersburgblocknumber();
  void set_allocated_petersburgblocknumber(::std::string* petersburgblocknumber);

  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.EthereumConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr frontierblocknumber_;
  ::google::protobuf::internal::ArenaStringPtr homesteadblocknumber_;
  ::google::protobuf::internal::ArenaStringPtr eip150blocknumber_;
  ::google::protobuf::internal::ArenaStringPtr eip160blocknumber_;
  ::google::protobuf::internal::ArenaStringPtr eip161blocknumber_;
  ::google::protobuf::internal::ArenaStringPtr maxcodesize_;
  ::google::protobuf::internal::ArenaStringPtr accountstartnonce_;
  ::google::protobuf::internal::ArenaStringPtr byzantiumblocknumber_;
  ::google::protobuf::internal::ArenaStringPtr constantinopleblocknumber_;
  ::google::protobuf::internal::ArenaStringPtr petersburgblocknumber_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static EthereumConfig* default_instance_;
};
// -------------------------------------------------------------------

class IeleConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.IeleConfig) */ {
 public:
  IeleConfig();
  virtual ~IeleConfig();

  IeleConfig(const IeleConfig& from);

  inline IeleConfig& operator=(const IeleConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IeleConfig& default_instance();

  void Swap(IeleConfig* other);

  // implements Message ----------------------------------------------

  inline IeleConfig* New() const { return New(NULL); }

  IeleConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IeleConfig& from);
  void MergeFrom(const IeleConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IeleConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes danseBlockNumber = 1;
  void clear_danseblocknumber();
  static const int kDanseBlockNumberFieldNumber = 1;
  const ::std::string& danseblocknumber() const;
  void set_danseblocknumber(const ::std::string& value);
  void set_danseblocknumber(const char* value);
  void set_danseblocknumber(const void* value, size_t size);
  ::std::string* mutable_danseblocknumber();
  ::std::string* release_danseblocknumber();
  void set_allocated_danseblocknumber(::std::string* danseblocknumber);

  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.IeleConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr danseblocknumber_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static IeleConfig* default_instance_;
};
// -------------------------------------------------------------------

class GetAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.GetAccount) */ {
 public:
  GetAccount();
  virtual ~GetAccount();

  GetAccount(const GetAccount& from);

  inline GetAccount& operator=(const GetAccount& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAccount& default_instance();

  void Swap(GetAccount* other);

  // implements Message ----------------------------------------------

  inline GetAccount* New() const { return New(NULL); }

  GetAccount* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAccount& from);
  void MergeFrom(const GetAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetAccount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.GetAccount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static GetAccount* default_instance_;
};
// -------------------------------------------------------------------

class Account : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.Account) */ {
 public:
  Account();
  virtual ~Account();

  Account(const Account& from);

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Account& default_instance();

  void Swap(Account* other);

  // implements Message ----------------------------------------------

  inline Account* New() const { return New(NULL); }

  Account* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Account* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes nonce = 1;
  void clear_nonce();
  static const int kNonceFieldNumber = 1;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // optional bytes balance = 2;
  void clear_balance();
  static const int kBalanceFieldNumber = 2;
  const ::std::string& balance() const;
  void set_balance(const ::std::string& value);
  void set_balance(const char* value);
  void set_balance(const void* value, size_t size);
  ::std::string* mutable_balance();
  ::std::string* release_balance();
  void set_allocated_balance(::std::string* balance);

  // optional bool codeEmpty = 3;
  void clear_codeempty();
  static const int kCodeEmptyFieldNumber = 3;
  bool codeempty() const;
  void set_codeempty(bool value);

  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.Account)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::internal::ArenaStringPtr balance_;
  bool codeempty_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static Account* default_instance_;
};
// -------------------------------------------------------------------

class GetStorageData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.GetStorageData) */ {
 public:
  GetStorageData();
  virtual ~GetStorageData();

  GetStorageData(const GetStorageData& from);

  inline GetStorageData& operator=(const GetStorageData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStorageData& default_instance();

  void Swap(GetStorageData* other);

  // implements Message ----------------------------------------------

  inline GetStorageData* New() const { return New(NULL); }

  GetStorageData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStorageData& from);
  void MergeFrom(const GetStorageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetStorageData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional bytes offset = 2;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  const ::std::string& offset() const;
  void set_offset(const ::std::string& value);
  void set_offset(const char* value);
  void set_offset(const void* value, size_t size);
  ::std::string* mutable_offset();
  ::std::string* release_offset();
  void set_allocated_offset(::std::string* offset);

  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.GetStorageData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr offset_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static GetStorageData* default_instance_;
};
// -------------------------------------------------------------------

class StorageData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.StorageData) */ {
 public:
  StorageData();
  virtual ~StorageData();

  StorageData(const StorageData& from);

  inline StorageData& operator=(const StorageData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageData& default_instance();

  void Swap(StorageData* other);

  // implements Message ----------------------------------------------

  inline StorageData* New() const { return New(NULL); }

  StorageData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StorageData& from);
  void MergeFrom(const StorageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StorageData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.StorageData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static StorageData* default_instance_;
};
// -------------------------------------------------------------------

class GetCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.GetCode) */ {
 public:
  GetCode();
  virtual ~GetCode();

  GetCode(const GetCode& from);

  inline GetCode& operator=(const GetCode& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCode& default_instance();

  void Swap(GetCode* other);

  // implements Message ----------------------------------------------

  inline GetCode* New() const { return New(NULL); }

  GetCode* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetCode& from);
  void MergeFrom(const GetCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.GetCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static GetCode* default_instance_;
};
// -------------------------------------------------------------------

class Code : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.Code) */ {
 public:
  Code();
  virtual ~Code();

  Code(const Code& from);

  inline Code& operator=(const Code& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Code& default_instance();

  void Swap(Code* other);

  // implements Message ----------------------------------------------

  inline Code* New() const { return New(NULL); }

  Code* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Code& from);
  void MergeFrom(const Code& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Code* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const void* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.Code)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static Code* default_instance_;
};
// -------------------------------------------------------------------

class GetBlockhash : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.GetBlockhash) */ {
 public:
  GetBlockhash();
  virtual ~GetBlockhash();

  GetBlockhash(const GetBlockhash& from);

  inline GetBlockhash& operator=(const GetBlockhash& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBlockhash& default_instance();

  void Swap(GetBlockhash* other);

  // implements Message ----------------------------------------------

  inline GetBlockhash* New() const { return New(NULL); }

  GetBlockhash* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetBlockhash& from);
  void MergeFrom(const GetBlockhash& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetBlockhash* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 offset = 1;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  ::google::protobuf::int32 offset() const;
  void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.GetBlockhash)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 offset_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static GetBlockhash* default_instance_;
};
// -------------------------------------------------------------------

class Blockhash : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.Blockhash) */ {
 public:
  Blockhash();
  virtual ~Blockhash();

  Blockhash(const Blockhash& from);

  inline Blockhash& operator=(const Blockhash& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Blockhash& default_instance();

  void Swap(Blockhash* other);

  // implements Message ----------------------------------------------

  inline Blockhash* New() const { return New(NULL); }

  Blockhash* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Blockhash& from);
  void MergeFrom(const Blockhash& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Blockhash* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes hash = 1;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.Blockhash)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static Blockhash* default_instance_;
};
// -------------------------------------------------------------------

class CallResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.CallResult) */ {
 public:
  CallResult();
  virtual ~CallResult();

  CallResult(const CallResult& from);

  inline CallResult& operator=(const CallResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallResult& default_instance();

  void Swap(CallResult* other);

  // implements Message ----------------------------------------------

  inline CallResult* New() const { return New(NULL); }

  CallResult* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallResult& from);
  void MergeFrom(const CallResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes returnData = 1;
  void clear_returndata();
  static const int kReturnDataFieldNumber = 1;
  const ::std::string& returndata() const;
  void set_returndata(const ::std::string& value);
  void set_returndata(const char* value);
  void set_returndata(const void* value, size_t size);
  ::std::string* mutable_returndata();
  ::std::string* release_returndata();
  void set_allocated_returndata(::std::string* returndata);

  // optional bytes returnCode = 2;
  void clear_returncode();
  static const int kReturnCodeFieldNumber = 2;
  const ::std::string& returncode() const;
  void set_returncode(const ::std::string& value);
  void set_returncode(const char* value);
  void set_returncode(const void* value, size_t size);
  ::std::string* mutable_returncode();
  ::std::string* release_returncode();
  void set_allocated_returncode(::std::string* returncode);

  // optional bytes gasRemaining = 3;
  void clear_gasremaining();
  static const int kGasRemainingFieldNumber = 3;
  const ::std::string& gasremaining() const;
  void set_gasremaining(const ::std::string& value);
  void set_gasremaining(const char* value);
  void set_gasremaining(const void* value, size_t size);
  ::std::string* mutable_gasremaining();
  ::std::string* release_gasremaining();
  void set_allocated_gasremaining(::std::string* gasremaining);

  // optional bytes gasRefund = 4;
  void clear_gasrefund();
  static const int kGasRefundFieldNumber = 4;
  const ::std::string& gasrefund() const;
  void set_gasrefund(const ::std::string& value);
  void set_gasrefund(const char* value);
  void set_gasrefund(const void* value, size_t size);
  ::std::string* mutable_gasrefund();
  ::std::string* release_gasrefund();
  void set_allocated_gasrefund(::std::string* gasrefund);

  // optional bool error = 5;
  void clear_error();
  static const int kErrorFieldNumber = 5;
  bool error() const;
  void set_error(bool value);

  // repeated .org.kframework.kevm.extvm.ModifiedAccount modifiedAccounts = 6;
  int modifiedaccounts_size() const;
  void clear_modifiedaccounts();
  static const int kModifiedAccountsFieldNumber = 6;
  const ::org::kframework::kevm::extvm::ModifiedAccount& modifiedaccounts(int index) const;
  ::org::kframework::kevm::extvm::ModifiedAccount* mutable_modifiedaccounts(int index);
  ::org::kframework::kevm::extvm::ModifiedAccount* add_modifiedaccounts();
  ::google::protobuf::RepeatedPtrField< ::org::kframework::kevm::extvm::ModifiedAccount >*
      mutable_modifiedaccounts();
  const ::google::protobuf::RepeatedPtrField< ::org::kframework::kevm::extvm::ModifiedAccount >&
      modifiedaccounts() const;

  // repeated bytes deletedAccounts = 7;
  int deletedaccounts_size() const;
  void clear_deletedaccounts();
  static const int kDeletedAccountsFieldNumber = 7;
  const ::std::string& deletedaccounts(int index) const;
  ::std::string* mutable_deletedaccounts(int index);
  void set_deletedaccounts(int index, const ::std::string& value);
  void set_deletedaccounts(int index, const char* value);
  void set_deletedaccounts(int index, const void* value, size_t size);
  ::std::string* add_deletedaccounts();
  void add_deletedaccounts(const ::std::string& value);
  void add_deletedaccounts(const char* value);
  void add_deletedaccounts(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& deletedaccounts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_deletedaccounts();

  // repeated bytes touchedAccounts = 8;
  int touchedaccounts_size() const;
  void clear_touchedaccounts();
  static const int kTouchedAccountsFieldNumber = 8;
  const ::std::string& touchedaccounts(int index) const;
  ::std::string* mutable_touchedaccounts(int index);
  void set_touchedaccounts(int index, const ::std::string& value);
  void set_touchedaccounts(int index, const char* value);
  void set_touchedaccounts(int index, const void* value, size_t size);
  ::std::string* add_touchedaccounts();
  void add_touchedaccounts(const ::std::string& value);
  void add_touchedaccounts(const char* value);
  void add_touchedaccounts(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& touchedaccounts() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_touchedaccounts();

  // repeated .org.kframework.kevm.extvm.LogEntry logs = 9;
  int logs_size() const;
  void clear_logs();
  static const int kLogsFieldNumber = 9;
  const ::org::kframework::kevm::extvm::LogEntry& logs(int index) const;
  ::org::kframework::kevm::extvm::LogEntry* mutable_logs(int index);
  ::org::kframework::kevm::extvm::LogEntry* add_logs();
  ::google::protobuf::RepeatedPtrField< ::org::kframework::kevm::extvm::LogEntry >*
      mutable_logs();
  const ::google::protobuf::RepeatedPtrField< ::org::kframework::kevm::extvm::LogEntry >&
      logs() const;

  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.CallResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr returndata_;
  ::google::protobuf::internal::ArenaStringPtr returncode_;
  ::google::protobuf::internal::ArenaStringPtr gasremaining_;
  ::google::protobuf::internal::ArenaStringPtr gasrefund_;
  ::google::protobuf::RepeatedPtrField< ::org::kframework::kevm::extvm::ModifiedAccount > modifiedaccounts_;
  ::google::protobuf::RepeatedPtrField< ::std::string> deletedaccounts_;
  ::google::protobuf::RepeatedPtrField< ::std::string> touchedaccounts_;
  ::google::protobuf::RepeatedPtrField< ::org::kframework::kevm::extvm::LogEntry > logs_;
  bool error_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static CallResult* default_instance_;
};
// -------------------------------------------------------------------

class ModifiedAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.ModifiedAccount) */ {
 public:
  ModifiedAccount();
  virtual ~ModifiedAccount();

  ModifiedAccount(const ModifiedAccount& from);

  inline ModifiedAccount& operator=(const ModifiedAccount& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifiedAccount& default_instance();

  void Swap(ModifiedAccount* other);

  // implements Message ----------------------------------------------

  inline ModifiedAccount* New() const { return New(NULL); }

  ModifiedAccount* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModifiedAccount& from);
  void MergeFrom(const ModifiedAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModifiedAccount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional bytes nonce = 2;
  void clear_nonce();
  static const int kNonceFieldNumber = 2;
  const ::std::string& nonce() const;
  void set_nonce(const ::std::string& value);
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  ::std::string* mutable_nonce();
  ::std::string* release_nonce();
  void set_allocated_nonce(::std::string* nonce);

  // optional bytes balance = 3;
  void clear_balance();
  static const int kBalanceFieldNumber = 3;
  const ::std::string& balance() const;
  void set_balance(const ::std::string& value);
  void set_balance(const char* value);
  void set_balance(const void* value, size_t size);
  ::std::string* mutable_balance();
  ::std::string* release_balance();
  void set_allocated_balance(::std::string* balance);

  // repeated .org.kframework.kevm.extvm.StorageUpdate storageUpdates = 4;
  int storageupdates_size() const;
  void clear_storageupdates();
  static const int kStorageUpdatesFieldNumber = 4;
  const ::org::kframework::kevm::extvm::StorageUpdate& storageupdates(int index) const;
  ::org::kframework::kevm::extvm::StorageUpdate* mutable_storageupdates(int index);
  ::org::kframework::kevm::extvm::StorageUpdate* add_storageupdates();
  ::google::protobuf::RepeatedPtrField< ::org::kframework::kevm::extvm::StorageUpdate >*
      mutable_storageupdates();
  const ::google::protobuf::RepeatedPtrField< ::org::kframework::kevm::extvm::StorageUpdate >&
      storageupdates() const;

  // optional bytes code = 5;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const void* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.ModifiedAccount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr nonce_;
  ::google::protobuf::internal::ArenaStringPtr balance_;
  ::google::protobuf::RepeatedPtrField< ::org::kframework::kevm::extvm::StorageUpdate > storageupdates_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static ModifiedAccount* default_instance_;
};
// -------------------------------------------------------------------

class StorageUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.StorageUpdate) */ {
 public:
  StorageUpdate();
  virtual ~StorageUpdate();

  StorageUpdate(const StorageUpdate& from);

  inline StorageUpdate& operator=(const StorageUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageUpdate& default_instance();

  void Swap(StorageUpdate* other);

  // implements Message ----------------------------------------------

  inline StorageUpdate* New() const { return New(NULL); }

  StorageUpdate* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StorageUpdate& from);
  void MergeFrom(const StorageUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StorageUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes offset = 1;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  const ::std::string& offset() const;
  void set_offset(const ::std::string& value);
  void set_offset(const char* value);
  void set_offset(const void* value, size_t size);
  ::std::string* mutable_offset();
  ::std::string* release_offset();
  void set_allocated_offset(::std::string* offset);

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.StorageUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr offset_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static StorageUpdate* default_instance_;
};
// -------------------------------------------------------------------

class LogEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.LogEntry) */ {
 public:
  LogEntry();
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogEntry& default_instance();

  void Swap(LogEntry* other);

  // implements Message ----------------------------------------------

  inline LogEntry* New() const { return New(NULL); }

  LogEntry* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // repeated bytes topics = 2;
  int topics_size() const;
  void clear_topics();
  static const int kTopicsFieldNumber = 2;
  const ::std::string& topics(int index) const;
  ::std::string* mutable_topics(int index);
  void set_topics(int index, const ::std::string& value);
  void set_topics(int index, const char* value);
  void set_topics(int index, const void* value, size_t size);
  ::std::string* add_topics();
  void add_topics(const ::std::string& value);
  void add_topics(const char* value);
  void add_topics(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& topics() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topics();

  // optional bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.LogEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topics_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static LogEntry* default_instance_;
};
// -------------------------------------------------------------------

class VMQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:org.kframework.kevm.extvm.VMQuery) */ {
 public:
  VMQuery();
  virtual ~VMQuery();

  VMQuery(const VMQuery& from);

  inline VMQuery& operator=(const VMQuery& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VMQuery& default_instance();

  enum QueryCase {
    kGetAccount = 1,
    kGetStorageData = 2,
    kGetCode = 3,
    kGetBlockhash = 4,
    kCallResult = 5,
    QUERY_NOT_SET = 0,
  };

  void Swap(VMQuery* other);

  // implements Message ----------------------------------------------

  inline VMQuery* New() const { return New(NULL); }

  VMQuery* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VMQuery& from);
  void MergeFrom(const VMQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VMQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .org.kframework.kevm.extvm.GetAccount getAccount = 1;
  bool has_getaccount() const;
  void clear_getaccount();
  static const int kGetAccountFieldNumber = 1;
  const ::org::kframework::kevm::extvm::GetAccount& getaccount() const;
  ::org::kframework::kevm::extvm::GetAccount* mutable_getaccount();
  ::org::kframework::kevm::extvm::GetAccount* release_getaccount();
  void set_allocated_getaccount(::org::kframework::kevm::extvm::GetAccount* getaccount);

  // optional .org.kframework.kevm.extvm.GetStorageData getStorageData = 2;
  bool has_getstoragedata() const;
  void clear_getstoragedata();
  static const int kGetStorageDataFieldNumber = 2;
  const ::org::kframework::kevm::extvm::GetStorageData& getstoragedata() const;
  ::org::kframework::kevm::extvm::GetStorageData* mutable_getstoragedata();
  ::org::kframework::kevm::extvm::GetStorageData* release_getstoragedata();
  void set_allocated_getstoragedata(::org::kframework::kevm::extvm::GetStorageData* getstoragedata);

  // optional .org.kframework.kevm.extvm.GetCode getCode = 3;
  bool has_getcode() const;
  void clear_getcode();
  static const int kGetCodeFieldNumber = 3;
  const ::org::kframework::kevm::extvm::GetCode& getcode() const;
  ::org::kframework::kevm::extvm::GetCode* mutable_getcode();
  ::org::kframework::kevm::extvm::GetCode* release_getcode();
  void set_allocated_getcode(::org::kframework::kevm::extvm::GetCode* getcode);

  // optional .org.kframework.kevm.extvm.GetBlockhash getBlockhash = 4;
  bool has_getblockhash() const;
  void clear_getblockhash();
  static const int kGetBlockhashFieldNumber = 4;
  const ::org::kframework::kevm::extvm::GetBlockhash& getblockhash() const;
  ::org::kframework::kevm::extvm::GetBlockhash* mutable_getblockhash();
  ::org::kframework::kevm::extvm::GetBlockhash* release_getblockhash();
  void set_allocated_getblockhash(::org::kframework::kevm::extvm::GetBlockhash* getblockhash);

  // optional .org.kframework.kevm.extvm.CallResult callResult = 5;
  bool has_callresult() const;
  void clear_callresult();
  static const int kCallResultFieldNumber = 5;
  const ::org::kframework::kevm::extvm::CallResult& callresult() const;
  ::org::kframework::kevm::extvm::CallResult* mutable_callresult();
  ::org::kframework::kevm::extvm::CallResult* release_callresult();
  void set_allocated_callresult(::org::kframework::kevm::extvm::CallResult* callresult);

  QueryCase query_case() const;
  // @@protoc_insertion_point(class_scope:org.kframework.kevm.extvm.VMQuery)
 private:
  inline void set_has_getaccount();
  inline void set_has_getstoragedata();
  inline void set_has_getcode();
  inline void set_has_getblockhash();
  inline void set_has_callresult();

  inline bool has_query() const;
  void clear_query();
  inline void clear_has_query();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union QueryUnion {
    QueryUnion() {}
    ::org::kframework::kevm::extvm::GetAccount* getaccount_;
    ::org::kframework::kevm::extvm::GetStorageData* getstoragedata_;
    ::org::kframework::kevm::extvm::GetCode* getcode_;
    ::org::kframework::kevm::extvm::GetBlockhash* getblockhash_;
    ::org::kframework::kevm::extvm::CallResult* callresult_;
  } query_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_proto_2fmsg_2eproto();
  friend void protobuf_AssignDesc_proto_2fmsg_2eproto();
  friend void protobuf_ShutdownFile_proto_2fmsg_2eproto();

  void InitAsDefaultInstance();
  static VMQuery* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Hello

// optional string version = 1;
inline void Hello::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Hello::version() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.Hello.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hello::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.Hello.version)
}
inline void Hello::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.Hello.version)
}
inline void Hello::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.Hello.version)
}
inline ::std::string* Hello::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.Hello.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Hello::release_version() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.Hello.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hello::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.Hello.version)
}

// optional .org.kframework.kevm.extvm.EthereumConfig ethereumConfig = 2;
inline bool Hello::has_ethereumconfig() const {
  return config_case() == kEthereumConfig;
}
inline void Hello::set_has_ethereumconfig() {
  _oneof_case_[0] = kEthereumConfig;
}
inline void Hello::clear_ethereumconfig() {
  if (has_ethereumconfig()) {
    delete config_.ethereumconfig_;
    clear_has_config();
  }
}
inline  const ::org::kframework::kevm::extvm::EthereumConfig& Hello::ethereumconfig() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.Hello.ethereumConfig)
  return has_ethereumconfig()
      ? *config_.ethereumconfig_
      : ::org::kframework::kevm::extvm::EthereumConfig::default_instance();
}
inline ::org::kframework::kevm::extvm::EthereumConfig* Hello::mutable_ethereumconfig() {
  if (!has_ethereumconfig()) {
    clear_config();
    set_has_ethereumconfig();
    config_.ethereumconfig_ = new ::org::kframework::kevm::extvm::EthereumConfig;
  }
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.Hello.ethereumConfig)
  return config_.ethereumconfig_;
}
inline ::org::kframework::kevm::extvm::EthereumConfig* Hello::release_ethereumconfig() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.Hello.ethereumConfig)
  if (has_ethereumconfig()) {
    clear_has_config();
    ::org::kframework::kevm::extvm::EthereumConfig* temp = config_.ethereumconfig_;
    config_.ethereumconfig_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Hello::set_allocated_ethereumconfig(::org::kframework::kevm::extvm::EthereumConfig* ethereumconfig) {
  clear_config();
  if (ethereumconfig) {
    set_has_ethereumconfig();
    config_.ethereumconfig_ = ethereumconfig;
  }
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.Hello.ethereumConfig)
}

// optional .org.kframework.kevm.extvm.IeleConfig ieleConfig = 3;
inline bool Hello::has_ieleconfig() const {
  return config_case() == kIeleConfig;
}
inline void Hello::set_has_ieleconfig() {
  _oneof_case_[0] = kIeleConfig;
}
inline void Hello::clear_ieleconfig() {
  if (has_ieleconfig()) {
    delete config_.ieleconfig_;
    clear_has_config();
  }
}
inline  const ::org::kframework::kevm::extvm::IeleConfig& Hello::ieleconfig() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.Hello.ieleConfig)
  return has_ieleconfig()
      ? *config_.ieleconfig_
      : ::org::kframework::kevm::extvm::IeleConfig::default_instance();
}
inline ::org::kframework::kevm::extvm::IeleConfig* Hello::mutable_ieleconfig() {
  if (!has_ieleconfig()) {
    clear_config();
    set_has_ieleconfig();
    config_.ieleconfig_ = new ::org::kframework::kevm::extvm::IeleConfig;
  }
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.Hello.ieleConfig)
  return config_.ieleconfig_;
}
inline ::org::kframework::kevm::extvm::IeleConfig* Hello::release_ieleconfig() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.Hello.ieleConfig)
  if (has_ieleconfig()) {
    clear_has_config();
    ::org::kframework::kevm::extvm::IeleConfig* temp = config_.ieleconfig_;
    config_.ieleconfig_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Hello::set_allocated_ieleconfig(::org::kframework::kevm::extvm::IeleConfig* ieleconfig) {
  clear_config();
  if (ieleconfig) {
    set_has_ieleconfig();
    config_.ieleconfig_ = ieleconfig;
  }
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.Hello.ieleConfig)
}

inline bool Hello::has_config() const {
  return config_case() != CONFIG_NOT_SET;
}
inline void Hello::clear_has_config() {
  _oneof_case_[0] = CONFIG_NOT_SET;
}
inline Hello::ConfigCase Hello::config_case() const {
  return Hello::ConfigCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CallContext

// optional bytes callerAddr = 1;
inline void CallContext::clear_calleraddr() {
  calleraddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallContext::calleraddr() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallContext.callerAddr)
  return calleraddr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallContext::set_calleraddr(const ::std::string& value) {
  
  calleraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.CallContext.callerAddr)
}
inline void CallContext::set_calleraddr(const char* value) {
  
  calleraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.CallContext.callerAddr)
}
inline void CallContext::set_calleraddr(const void* value, size_t size) {
  
  calleraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.CallContext.callerAddr)
}
inline ::std::string* CallContext::mutable_calleraddr() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallContext.callerAddr)
  return calleraddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallContext::release_calleraddr() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.CallContext.callerAddr)
  
  return calleraddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallContext::set_allocated_calleraddr(::std::string* calleraddr) {
  if (calleraddr != NULL) {
    
  } else {
    
  }
  calleraddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), calleraddr);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.CallContext.callerAddr)
}

// optional bytes recipientAddr = 2;
inline void CallContext::clear_recipientaddr() {
  recipientaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallContext::recipientaddr() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallContext.recipientAddr)
  return recipientaddr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallContext::set_recipientaddr(const ::std::string& value) {
  
  recipientaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.CallContext.recipientAddr)
}
inline void CallContext::set_recipientaddr(const char* value) {
  
  recipientaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.CallContext.recipientAddr)
}
inline void CallContext::set_recipientaddr(const void* value, size_t size) {
  
  recipientaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.CallContext.recipientAddr)
}
inline ::std::string* CallContext::mutable_recipientaddr() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallContext.recipientAddr)
  return recipientaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallContext::release_recipientaddr() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.CallContext.recipientAddr)
  
  return recipientaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallContext::set_allocated_recipientaddr(::std::string* recipientaddr) {
  if (recipientaddr != NULL) {
    
  } else {
    
  }
  recipientaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recipientaddr);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.CallContext.recipientAddr)
}

// optional bytes inputData = 3;
inline void CallContext::clear_inputdata() {
  inputdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallContext::inputdata() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallContext.inputData)
  return inputdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallContext::set_inputdata(const ::std::string& value) {
  
  inputdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.CallContext.inputData)
}
inline void CallContext::set_inputdata(const char* value) {
  
  inputdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.CallContext.inputData)
}
inline void CallContext::set_inputdata(const void* value, size_t size) {
  
  inputdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.CallContext.inputData)
}
inline ::std::string* CallContext::mutable_inputdata() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallContext.inputData)
  return inputdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallContext::release_inputdata() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.CallContext.inputData)
  
  return inputdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallContext::set_allocated_inputdata(::std::string* inputdata) {
  if (inputdata != NULL) {
    
  } else {
    
  }
  inputdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inputdata);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.CallContext.inputData)
}

// optional bytes callValue = 4;
inline void CallContext::clear_callvalue() {
  callvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallContext::callvalue() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallContext.callValue)
  return callvalue_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallContext::set_callvalue(const ::std::string& value) {
  
  callvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.CallContext.callValue)
}
inline void CallContext::set_callvalue(const char* value) {
  
  callvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.CallContext.callValue)
}
inline void CallContext::set_callvalue(const void* value, size_t size) {
  
  callvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.CallContext.callValue)
}
inline ::std::string* CallContext::mutable_callvalue() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallContext.callValue)
  return callvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallContext::release_callvalue() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.CallContext.callValue)
  
  return callvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallContext::set_allocated_callvalue(::std::string* callvalue) {
  if (callvalue != NULL) {
    
  } else {
    
  }
  callvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callvalue);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.CallContext.callValue)
}

// optional bytes gasPrice = 5;
inline void CallContext::clear_gasprice() {
  gasprice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallContext::gasprice() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallContext.gasPrice)
  return gasprice_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallContext::set_gasprice(const ::std::string& value) {
  
  gasprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.CallContext.gasPrice)
}
inline void CallContext::set_gasprice(const char* value) {
  
  gasprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.CallContext.gasPrice)
}
inline void CallContext::set_gasprice(const void* value, size_t size) {
  
  gasprice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.CallContext.gasPrice)
}
inline ::std::string* CallContext::mutable_gasprice() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallContext.gasPrice)
  return gasprice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallContext::release_gasprice() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.CallContext.gasPrice)
  
  return gasprice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallContext::set_allocated_gasprice(::std::string* gasprice) {
  if (gasprice != NULL) {
    
  } else {
    
  }
  gasprice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gasprice);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.CallContext.gasPrice)
}

// optional bytes gasProvided = 6;
inline void CallContext::clear_gasprovided() {
  gasprovided_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallContext::gasprovided() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallContext.gasProvided)
  return gasprovided_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallContext::set_gasprovided(const ::std::string& value) {
  
  gasprovided_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.CallContext.gasProvided)
}
inline void CallContext::set_gasprovided(const char* value) {
  
  gasprovided_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.CallContext.gasProvided)
}
inline void CallContext::set_gasprovided(const void* value, size_t size) {
  
  gasprovided_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.CallContext.gasProvided)
}
inline ::std::string* CallContext::mutable_gasprovided() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallContext.gasProvided)
  return gasprovided_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallContext::release_gasprovided() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.CallContext.gasProvided)
  
  return gasprovided_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallContext::set_allocated_gasprovided(::std::string* gasprovided) {
  if (gasprovided != NULL) {
    
  } else {
    
  }
  gasprovided_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gasprovided);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.CallContext.gasProvided)
}

// optional .org.kframework.kevm.extvm.BlockHeader blockHeader = 7;
inline bool CallContext::has_blockheader() const {
  return !_is_default_instance_ && blockheader_ != NULL;
}
inline void CallContext::clear_blockheader() {
  if (GetArenaNoVirtual() == NULL && blockheader_ != NULL) delete blockheader_;
  blockheader_ = NULL;
}
inline const ::org::kframework::kevm::extvm::BlockHeader& CallContext::blockheader() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallContext.blockHeader)
  return blockheader_ != NULL ? *blockheader_ : *default_instance_->blockheader_;
}
inline ::org::kframework::kevm::extvm::BlockHeader* CallContext::mutable_blockheader() {
  
  if (blockheader_ == NULL) {
    blockheader_ = new ::org::kframework::kevm::extvm::BlockHeader;
  }
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallContext.blockHeader)
  return blockheader_;
}
inline ::org::kframework::kevm::extvm::BlockHeader* CallContext::release_blockheader() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.CallContext.blockHeader)
  
  ::org::kframework::kevm::extvm::BlockHeader* temp = blockheader_;
  blockheader_ = NULL;
  return temp;
}
inline void CallContext::set_allocated_blockheader(::org::kframework::kevm::extvm::BlockHeader* blockheader) {
  delete blockheader_;
  blockheader_ = blockheader;
  if (blockheader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.CallContext.blockHeader)
}

// optional .org.kframework.kevm.extvm.EthereumConfig ethereumConfig = 8;
inline bool CallContext::has_ethereumconfig() const {
  return config_case() == kEthereumConfig;
}
inline void CallContext::set_has_ethereumconfig() {
  _oneof_case_[0] = kEthereumConfig;
}
inline void CallContext::clear_ethereumconfig() {
  if (has_ethereumconfig()) {
    delete config_.ethereumconfig_;
    clear_has_config();
  }
}
inline  const ::org::kframework::kevm::extvm::EthereumConfig& CallContext::ethereumconfig() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallContext.ethereumConfig)
  return has_ethereumconfig()
      ? *config_.ethereumconfig_
      : ::org::kframework::kevm::extvm::EthereumConfig::default_instance();
}
inline ::org::kframework::kevm::extvm::EthereumConfig* CallContext::mutable_ethereumconfig() {
  if (!has_ethereumconfig()) {
    clear_config();
    set_has_ethereumconfig();
    config_.ethereumconfig_ = new ::org::kframework::kevm::extvm::EthereumConfig;
  }
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallContext.ethereumConfig)
  return config_.ethereumconfig_;
}
inline ::org::kframework::kevm::extvm::EthereumConfig* CallContext::release_ethereumconfig() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.CallContext.ethereumConfig)
  if (has_ethereumconfig()) {
    clear_has_config();
    ::org::kframework::kevm::extvm::EthereumConfig* temp = config_.ethereumconfig_;
    config_.ethereumconfig_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CallContext::set_allocated_ethereumconfig(::org::kframework::kevm::extvm::EthereumConfig* ethereumconfig) {
  clear_config();
  if (ethereumconfig) {
    set_has_ethereumconfig();
    config_.ethereumconfig_ = ethereumconfig;
  }
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.CallContext.ethereumConfig)
}

// optional .org.kframework.kevm.extvm.IeleConfig ieleConfig = 9;
inline bool CallContext::has_ieleconfig() const {
  return config_case() == kIeleConfig;
}
inline void CallContext::set_has_ieleconfig() {
  _oneof_case_[0] = kIeleConfig;
}
inline void CallContext::clear_ieleconfig() {
  if (has_ieleconfig()) {
    delete config_.ieleconfig_;
    clear_has_config();
  }
}
inline  const ::org::kframework::kevm::extvm::IeleConfig& CallContext::ieleconfig() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallContext.ieleConfig)
  return has_ieleconfig()
      ? *config_.ieleconfig_
      : ::org::kframework::kevm::extvm::IeleConfig::default_instance();
}
inline ::org::kframework::kevm::extvm::IeleConfig* CallContext::mutable_ieleconfig() {
  if (!has_ieleconfig()) {
    clear_config();
    set_has_ieleconfig();
    config_.ieleconfig_ = new ::org::kframework::kevm::extvm::IeleConfig;
  }
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallContext.ieleConfig)
  return config_.ieleconfig_;
}
inline ::org::kframework::kevm::extvm::IeleConfig* CallContext::release_ieleconfig() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.CallContext.ieleConfig)
  if (has_ieleconfig()) {
    clear_has_config();
    ::org::kframework::kevm::extvm::IeleConfig* temp = config_.ieleconfig_;
    config_.ieleconfig_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CallContext::set_allocated_ieleconfig(::org::kframework::kevm::extvm::IeleConfig* ieleconfig) {
  clear_config();
  if (ieleconfig) {
    set_has_ieleconfig();
    config_.ieleconfig_ = ieleconfig;
  }
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.CallContext.ieleConfig)
}

inline bool CallContext::has_config() const {
  return config_case() != CONFIG_NOT_SET;
}
inline void CallContext::clear_has_config() {
  _oneof_case_[0] = CONFIG_NOT_SET;
}
inline CallContext::ConfigCase CallContext::config_case() const {
  return CallContext::ConfigCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BlockHeader

// optional bytes beneficiary = 1;
inline void BlockHeader::clear_beneficiary() {
  beneficiary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockHeader::beneficiary() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.BlockHeader.beneficiary)
  return beneficiary_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_beneficiary(const ::std::string& value) {
  
  beneficiary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.BlockHeader.beneficiary)
}
inline void BlockHeader::set_beneficiary(const char* value) {
  
  beneficiary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.BlockHeader.beneficiary)
}
inline void BlockHeader::set_beneficiary(const void* value, size_t size) {
  
  beneficiary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.BlockHeader.beneficiary)
}
inline ::std::string* BlockHeader::mutable_beneficiary() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.BlockHeader.beneficiary)
  return beneficiary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_beneficiary() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.BlockHeader.beneficiary)
  
  return beneficiary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_beneficiary(::std::string* beneficiary) {
  if (beneficiary != NULL) {
    
  } else {
    
  }
  beneficiary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), beneficiary);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.BlockHeader.beneficiary)
}

// optional bytes difficulty = 2;
inline void BlockHeader::clear_difficulty() {
  difficulty_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockHeader::difficulty() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.BlockHeader.difficulty)
  return difficulty_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_difficulty(const ::std::string& value) {
  
  difficulty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.BlockHeader.difficulty)
}
inline void BlockHeader::set_difficulty(const char* value) {
  
  difficulty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.BlockHeader.difficulty)
}
inline void BlockHeader::set_difficulty(const void* value, size_t size) {
  
  difficulty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.BlockHeader.difficulty)
}
inline ::std::string* BlockHeader::mutable_difficulty() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.BlockHeader.difficulty)
  return difficulty_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_difficulty() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.BlockHeader.difficulty)
  
  return difficulty_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_difficulty(::std::string* difficulty) {
  if (difficulty != NULL) {
    
  } else {
    
  }
  difficulty_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), difficulty);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.BlockHeader.difficulty)
}

// optional bytes number = 3;
inline void BlockHeader::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockHeader::number() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.BlockHeader.number)
  return number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_number(const ::std::string& value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.BlockHeader.number)
}
inline void BlockHeader::set_number(const char* value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.BlockHeader.number)
}
inline void BlockHeader::set_number(const void* value, size_t size) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.BlockHeader.number)
}
inline ::std::string* BlockHeader::mutable_number() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.BlockHeader.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_number() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.BlockHeader.number)
  
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.BlockHeader.number)
}

// optional bytes gasLimit = 4;
inline void BlockHeader::clear_gaslimit() {
  gaslimit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BlockHeader::gaslimit() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.BlockHeader.gasLimit)
  return gaslimit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_gaslimit(const ::std::string& value) {
  
  gaslimit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.BlockHeader.gasLimit)
}
inline void BlockHeader::set_gaslimit(const char* value) {
  
  gaslimit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.BlockHeader.gasLimit)
}
inline void BlockHeader::set_gaslimit(const void* value, size_t size) {
  
  gaslimit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.BlockHeader.gasLimit)
}
inline ::std::string* BlockHeader::mutable_gaslimit() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.BlockHeader.gasLimit)
  return gaslimit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlockHeader::release_gaslimit() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.BlockHeader.gasLimit)
  
  return gaslimit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_gaslimit(::std::string* gaslimit) {
  if (gaslimit != NULL) {
    
  } else {
    
  }
  gaslimit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gaslimit);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.BlockHeader.gasLimit)
}

// optional int64 unixTimestamp = 5;
inline void BlockHeader::clear_unixtimestamp() {
  unixtimestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BlockHeader::unixtimestamp() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.BlockHeader.unixTimestamp)
  return unixtimestamp_;
}
inline void BlockHeader::set_unixtimestamp(::google::protobuf::int64 value) {
  
  unixtimestamp_ = value;
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.BlockHeader.unixTimestamp)
}

// -------------------------------------------------------------------

// EthereumConfig

// optional bytes frontierBlockNumber = 1;
inline void EthereumConfig::clear_frontierblocknumber() {
  frontierblocknumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthereumConfig::frontierblocknumber() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.EthereumConfig.frontierBlockNumber)
  return frontierblocknumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_frontierblocknumber(const ::std::string& value) {
  
  frontierblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.EthereumConfig.frontierBlockNumber)
}
inline void EthereumConfig::set_frontierblocknumber(const char* value) {
  
  frontierblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.EthereumConfig.frontierBlockNumber)
}
inline void EthereumConfig::set_frontierblocknumber(const void* value, size_t size) {
  
  frontierblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.EthereumConfig.frontierBlockNumber)
}
inline ::std::string* EthereumConfig::mutable_frontierblocknumber() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.EthereumConfig.frontierBlockNumber)
  return frontierblocknumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthereumConfig::release_frontierblocknumber() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.EthereumConfig.frontierBlockNumber)
  
  return frontierblocknumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_allocated_frontierblocknumber(::std::string* frontierblocknumber) {
  if (frontierblocknumber != NULL) {
    
  } else {
    
  }
  frontierblocknumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frontierblocknumber);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.EthereumConfig.frontierBlockNumber)
}

// optional bytes homesteadBlockNumber = 2;
inline void EthereumConfig::clear_homesteadblocknumber() {
  homesteadblocknumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthereumConfig::homesteadblocknumber() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.EthereumConfig.homesteadBlockNumber)
  return homesteadblocknumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_homesteadblocknumber(const ::std::string& value) {
  
  homesteadblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.EthereumConfig.homesteadBlockNumber)
}
inline void EthereumConfig::set_homesteadblocknumber(const char* value) {
  
  homesteadblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.EthereumConfig.homesteadBlockNumber)
}
inline void EthereumConfig::set_homesteadblocknumber(const void* value, size_t size) {
  
  homesteadblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.EthereumConfig.homesteadBlockNumber)
}
inline ::std::string* EthereumConfig::mutable_homesteadblocknumber() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.EthereumConfig.homesteadBlockNumber)
  return homesteadblocknumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthereumConfig::release_homesteadblocknumber() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.EthereumConfig.homesteadBlockNumber)
  
  return homesteadblocknumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_allocated_homesteadblocknumber(::std::string* homesteadblocknumber) {
  if (homesteadblocknumber != NULL) {
    
  } else {
    
  }
  homesteadblocknumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), homesteadblocknumber);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.EthereumConfig.homesteadBlockNumber)
}

// optional bytes eip150BlockNumber = 3;
inline void EthereumConfig::clear_eip150blocknumber() {
  eip150blocknumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthereumConfig::eip150blocknumber() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.EthereumConfig.eip150BlockNumber)
  return eip150blocknumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_eip150blocknumber(const ::std::string& value) {
  
  eip150blocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.EthereumConfig.eip150BlockNumber)
}
inline void EthereumConfig::set_eip150blocknumber(const char* value) {
  
  eip150blocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.EthereumConfig.eip150BlockNumber)
}
inline void EthereumConfig::set_eip150blocknumber(const void* value, size_t size) {
  
  eip150blocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.EthereumConfig.eip150BlockNumber)
}
inline ::std::string* EthereumConfig::mutable_eip150blocknumber() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.EthereumConfig.eip150BlockNumber)
  return eip150blocknumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthereumConfig::release_eip150blocknumber() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.EthereumConfig.eip150BlockNumber)
  
  return eip150blocknumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_allocated_eip150blocknumber(::std::string* eip150blocknumber) {
  if (eip150blocknumber != NULL) {
    
  } else {
    
  }
  eip150blocknumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eip150blocknumber);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.EthereumConfig.eip150BlockNumber)
}

// optional bytes eip160BlockNumber = 4;
inline void EthereumConfig::clear_eip160blocknumber() {
  eip160blocknumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthereumConfig::eip160blocknumber() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.EthereumConfig.eip160BlockNumber)
  return eip160blocknumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_eip160blocknumber(const ::std::string& value) {
  
  eip160blocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.EthereumConfig.eip160BlockNumber)
}
inline void EthereumConfig::set_eip160blocknumber(const char* value) {
  
  eip160blocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.EthereumConfig.eip160BlockNumber)
}
inline void EthereumConfig::set_eip160blocknumber(const void* value, size_t size) {
  
  eip160blocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.EthereumConfig.eip160BlockNumber)
}
inline ::std::string* EthereumConfig::mutable_eip160blocknumber() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.EthereumConfig.eip160BlockNumber)
  return eip160blocknumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthereumConfig::release_eip160blocknumber() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.EthereumConfig.eip160BlockNumber)
  
  return eip160blocknumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_allocated_eip160blocknumber(::std::string* eip160blocknumber) {
  if (eip160blocknumber != NULL) {
    
  } else {
    
  }
  eip160blocknumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eip160blocknumber);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.EthereumConfig.eip160BlockNumber)
}

// optional bytes eip161BlockNumber = 5;
inline void EthereumConfig::clear_eip161blocknumber() {
  eip161blocknumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthereumConfig::eip161blocknumber() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.EthereumConfig.eip161BlockNumber)
  return eip161blocknumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_eip161blocknumber(const ::std::string& value) {
  
  eip161blocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.EthereumConfig.eip161BlockNumber)
}
inline void EthereumConfig::set_eip161blocknumber(const char* value) {
  
  eip161blocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.EthereumConfig.eip161BlockNumber)
}
inline void EthereumConfig::set_eip161blocknumber(const void* value, size_t size) {
  
  eip161blocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.EthereumConfig.eip161BlockNumber)
}
inline ::std::string* EthereumConfig::mutable_eip161blocknumber() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.EthereumConfig.eip161BlockNumber)
  return eip161blocknumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthereumConfig::release_eip161blocknumber() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.EthereumConfig.eip161BlockNumber)
  
  return eip161blocknumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_allocated_eip161blocknumber(::std::string* eip161blocknumber) {
  if (eip161blocknumber != NULL) {
    
  } else {
    
  }
  eip161blocknumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eip161blocknumber);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.EthereumConfig.eip161BlockNumber)
}

// optional bytes maxCodeSize = 6;
inline void EthereumConfig::clear_maxcodesize() {
  maxcodesize_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthereumConfig::maxcodesize() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.EthereumConfig.maxCodeSize)
  return maxcodesize_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_maxcodesize(const ::std::string& value) {
  
  maxcodesize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.EthereumConfig.maxCodeSize)
}
inline void EthereumConfig::set_maxcodesize(const char* value) {
  
  maxcodesize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.EthereumConfig.maxCodeSize)
}
inline void EthereumConfig::set_maxcodesize(const void* value, size_t size) {
  
  maxcodesize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.EthereumConfig.maxCodeSize)
}
inline ::std::string* EthereumConfig::mutable_maxcodesize() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.EthereumConfig.maxCodeSize)
  return maxcodesize_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthereumConfig::release_maxcodesize() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.EthereumConfig.maxCodeSize)
  
  return maxcodesize_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_allocated_maxcodesize(::std::string* maxcodesize) {
  if (maxcodesize != NULL) {
    
  } else {
    
  }
  maxcodesize_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maxcodesize);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.EthereumConfig.maxCodeSize)
}

// optional bytes accountStartNonce = 7;
inline void EthereumConfig::clear_accountstartnonce() {
  accountstartnonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthereumConfig::accountstartnonce() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.EthereumConfig.accountStartNonce)
  return accountstartnonce_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_accountstartnonce(const ::std::string& value) {
  
  accountstartnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.EthereumConfig.accountStartNonce)
}
inline void EthereumConfig::set_accountstartnonce(const char* value) {
  
  accountstartnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.EthereumConfig.accountStartNonce)
}
inline void EthereumConfig::set_accountstartnonce(const void* value, size_t size) {
  
  accountstartnonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.EthereumConfig.accountStartNonce)
}
inline ::std::string* EthereumConfig::mutable_accountstartnonce() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.EthereumConfig.accountStartNonce)
  return accountstartnonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthereumConfig::release_accountstartnonce() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.EthereumConfig.accountStartNonce)
  
  return accountstartnonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_allocated_accountstartnonce(::std::string* accountstartnonce) {
  if (accountstartnonce != NULL) {
    
  } else {
    
  }
  accountstartnonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountstartnonce);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.EthereumConfig.accountStartNonce)
}

// optional bytes byzantiumBlockNumber = 8;
inline void EthereumConfig::clear_byzantiumblocknumber() {
  byzantiumblocknumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthereumConfig::byzantiumblocknumber() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.EthereumConfig.byzantiumBlockNumber)
  return byzantiumblocknumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_byzantiumblocknumber(const ::std::string& value) {
  
  byzantiumblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.EthereumConfig.byzantiumBlockNumber)
}
inline void EthereumConfig::set_byzantiumblocknumber(const char* value) {
  
  byzantiumblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.EthereumConfig.byzantiumBlockNumber)
}
inline void EthereumConfig::set_byzantiumblocknumber(const void* value, size_t size) {
  
  byzantiumblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.EthereumConfig.byzantiumBlockNumber)
}
inline ::std::string* EthereumConfig::mutable_byzantiumblocknumber() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.EthereumConfig.byzantiumBlockNumber)
  return byzantiumblocknumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthereumConfig::release_byzantiumblocknumber() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.EthereumConfig.byzantiumBlockNumber)
  
  return byzantiumblocknumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_allocated_byzantiumblocknumber(::std::string* byzantiumblocknumber) {
  if (byzantiumblocknumber != NULL) {
    
  } else {
    
  }
  byzantiumblocknumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), byzantiumblocknumber);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.EthereumConfig.byzantiumBlockNumber)
}

// optional bytes constantinopleBlockNumber = 9;
inline void EthereumConfig::clear_constantinopleblocknumber() {
  constantinopleblocknumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthereumConfig::constantinopleblocknumber() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.EthereumConfig.constantinopleBlockNumber)
  return constantinopleblocknumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_constantinopleblocknumber(const ::std::string& value) {
  
  constantinopleblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.EthereumConfig.constantinopleBlockNumber)
}
inline void EthereumConfig::set_constantinopleblocknumber(const char* value) {
  
  constantinopleblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.EthereumConfig.constantinopleBlockNumber)
}
inline void EthereumConfig::set_constantinopleblocknumber(const void* value, size_t size) {
  
  constantinopleblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.EthereumConfig.constantinopleBlockNumber)
}
inline ::std::string* EthereumConfig::mutable_constantinopleblocknumber() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.EthereumConfig.constantinopleBlockNumber)
  return constantinopleblocknumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthereumConfig::release_constantinopleblocknumber() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.EthereumConfig.constantinopleBlockNumber)
  
  return constantinopleblocknumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_allocated_constantinopleblocknumber(::std::string* constantinopleblocknumber) {
  if (constantinopleblocknumber != NULL) {
    
  } else {
    
  }
  constantinopleblocknumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), constantinopleblocknumber);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.EthereumConfig.constantinopleBlockNumber)
}

// optional bytes petersburgBlockNumber = 10;
inline void EthereumConfig::clear_petersburgblocknumber() {
  petersburgblocknumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EthereumConfig::petersburgblocknumber() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.EthereumConfig.petersburgBlockNumber)
  return petersburgblocknumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_petersburgblocknumber(const ::std::string& value) {
  
  petersburgblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.EthereumConfig.petersburgBlockNumber)
}
inline void EthereumConfig::set_petersburgblocknumber(const char* value) {
  
  petersburgblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.EthereumConfig.petersburgBlockNumber)
}
inline void EthereumConfig::set_petersburgblocknumber(const void* value, size_t size) {
  
  petersburgblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.EthereumConfig.petersburgBlockNumber)
}
inline ::std::string* EthereumConfig::mutable_petersburgblocknumber() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.EthereumConfig.petersburgBlockNumber)
  return petersburgblocknumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EthereumConfig::release_petersburgblocknumber() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.EthereumConfig.petersburgBlockNumber)
  
  return petersburgblocknumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EthereumConfig::set_allocated_petersburgblocknumber(::std::string* petersburgblocknumber) {
  if (petersburgblocknumber != NULL) {
    
  } else {
    
  }
  petersburgblocknumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), petersburgblocknumber);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.EthereumConfig.petersburgBlockNumber)
}

// -------------------------------------------------------------------

// IeleConfig

// optional bytes danseBlockNumber = 1;
inline void IeleConfig::clear_danseblocknumber() {
  danseblocknumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IeleConfig::danseblocknumber() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.IeleConfig.danseBlockNumber)
  return danseblocknumber_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IeleConfig::set_danseblocknumber(const ::std::string& value) {
  
  danseblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.IeleConfig.danseBlockNumber)
}
inline void IeleConfig::set_danseblocknumber(const char* value) {
  
  danseblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.IeleConfig.danseBlockNumber)
}
inline void IeleConfig::set_danseblocknumber(const void* value, size_t size) {
  
  danseblocknumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.IeleConfig.danseBlockNumber)
}
inline ::std::string* IeleConfig::mutable_danseblocknumber() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.IeleConfig.danseBlockNumber)
  return danseblocknumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IeleConfig::release_danseblocknumber() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.IeleConfig.danseBlockNumber)
  
  return danseblocknumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IeleConfig::set_allocated_danseblocknumber(::std::string* danseblocknumber) {
  if (danseblocknumber != NULL) {
    
  } else {
    
  }
  danseblocknumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), danseblocknumber);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.IeleConfig.danseBlockNumber)
}

// -------------------------------------------------------------------

// GetAccount

// optional bytes address = 1;
inline void GetAccount::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAccount::address() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.GetAccount.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccount::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.GetAccount.address)
}
inline void GetAccount::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.GetAccount.address)
}
inline void GetAccount::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.GetAccount.address)
}
inline ::std::string* GetAccount::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.GetAccount.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAccount::release_address() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.GetAccount.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAccount::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.GetAccount.address)
}

// -------------------------------------------------------------------

// Account

// optional bytes nonce = 1;
inline void Account::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::nonce() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.Account.nonce)
  return nonce_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.Account.nonce)
}
inline void Account::set_nonce(const char* value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.Account.nonce)
}
inline void Account::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.Account.nonce)
}
inline ::std::string* Account::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.Account.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_nonce() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.Account.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.Account.nonce)
}

// optional bytes balance = 2;
inline void Account::clear_balance() {
  balance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Account::balance() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.Account.balance)
  return balance_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_balance(const ::std::string& value) {
  
  balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.Account.balance)
}
inline void Account::set_balance(const char* value) {
  
  balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.Account.balance)
}
inline void Account::set_balance(const void* value, size_t size) {
  
  balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.Account.balance)
}
inline ::std::string* Account::mutable_balance() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.Account.balance)
  return balance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Account::release_balance() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.Account.balance)
  
  return balance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_balance(::std::string* balance) {
  if (balance != NULL) {
    
  } else {
    
  }
  balance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), balance);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.Account.balance)
}

// optional bool codeEmpty = 3;
inline void Account::clear_codeempty() {
  codeempty_ = false;
}
inline bool Account::codeempty() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.Account.codeEmpty)
  return codeempty_;
}
inline void Account::set_codeempty(bool value) {
  
  codeempty_ = value;
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.Account.codeEmpty)
}

// -------------------------------------------------------------------

// GetStorageData

// optional bytes address = 1;
inline void GetStorageData::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetStorageData::address() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.GetStorageData.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetStorageData::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.GetStorageData.address)
}
inline void GetStorageData::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.GetStorageData.address)
}
inline void GetStorageData::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.GetStorageData.address)
}
inline ::std::string* GetStorageData::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.GetStorageData.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetStorageData::release_address() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.GetStorageData.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetStorageData::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.GetStorageData.address)
}

// optional bytes offset = 2;
inline void GetStorageData::clear_offset() {
  offset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetStorageData::offset() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.GetStorageData.offset)
  return offset_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetStorageData::set_offset(const ::std::string& value) {
  
  offset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.GetStorageData.offset)
}
inline void GetStorageData::set_offset(const char* value) {
  
  offset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.GetStorageData.offset)
}
inline void GetStorageData::set_offset(const void* value, size_t size) {
  
  offset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.GetStorageData.offset)
}
inline ::std::string* GetStorageData::mutable_offset() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.GetStorageData.offset)
  return offset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetStorageData::release_offset() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.GetStorageData.offset)
  
  return offset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetStorageData::set_allocated_offset(::std::string* offset) {
  if (offset != NULL) {
    
  } else {
    
  }
  offset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), offset);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.GetStorageData.offset)
}

// -------------------------------------------------------------------

// StorageData

// optional bytes data = 1;
inline void StorageData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageData::data() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.StorageData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.StorageData.data)
}
inline void StorageData::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.StorageData.data)
}
inline void StorageData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.StorageData.data)
}
inline ::std::string* StorageData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.StorageData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageData::release_data() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.StorageData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.StorageData.data)
}

// -------------------------------------------------------------------

// GetCode

// optional bytes address = 1;
inline void GetCode::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetCode::address() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.GetCode.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCode::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.GetCode.address)
}
inline void GetCode::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.GetCode.address)
}
inline void GetCode::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.GetCode.address)
}
inline ::std::string* GetCode::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.GetCode.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetCode::release_address() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.GetCode.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetCode::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.GetCode.address)
}

// -------------------------------------------------------------------

// Code

// optional bytes code = 1;
inline void Code::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Code::code() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.Code.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Code::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.Code.code)
}
inline void Code::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.Code.code)
}
inline void Code::set_code(const void* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.Code.code)
}
inline ::std::string* Code::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.Code.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Code::release_code() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.Code.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Code::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.Code.code)
}

// -------------------------------------------------------------------

// GetBlockhash

// optional int32 offset = 1;
inline void GetBlockhash::clear_offset() {
  offset_ = 0;
}
inline ::google::protobuf::int32 GetBlockhash::offset() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.GetBlockhash.offset)
  return offset_;
}
inline void GetBlockhash::set_offset(::google::protobuf::int32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.GetBlockhash.offset)
}

// -------------------------------------------------------------------

// Blockhash

// optional bytes hash = 1;
inline void Blockhash::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Blockhash::hash() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.Blockhash.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Blockhash::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.Blockhash.hash)
}
inline void Blockhash::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.Blockhash.hash)
}
inline void Blockhash::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.Blockhash.hash)
}
inline ::std::string* Blockhash::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.Blockhash.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Blockhash::release_hash() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.Blockhash.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Blockhash::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.Blockhash.hash)
}

// -------------------------------------------------------------------

// CallResult

// optional bytes returnData = 1;
inline void CallResult::clear_returndata() {
  returndata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallResult::returndata() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallResult.returnData)
  return returndata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallResult::set_returndata(const ::std::string& value) {
  
  returndata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.CallResult.returnData)
}
inline void CallResult::set_returndata(const char* value) {
  
  returndata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.CallResult.returnData)
}
inline void CallResult::set_returndata(const void* value, size_t size) {
  
  returndata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.CallResult.returnData)
}
inline ::std::string* CallResult::mutable_returndata() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallResult.returnData)
  return returndata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallResult::release_returndata() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.CallResult.returnData)
  
  return returndata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallResult::set_allocated_returndata(::std::string* returndata) {
  if (returndata != NULL) {
    
  } else {
    
  }
  returndata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), returndata);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.CallResult.returnData)
}

// optional bytes returnCode = 2;
inline void CallResult::clear_returncode() {
  returncode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallResult::returncode() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallResult.returnCode)
  return returncode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallResult::set_returncode(const ::std::string& value) {
  
  returncode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.CallResult.returnCode)
}
inline void CallResult::set_returncode(const char* value) {
  
  returncode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.CallResult.returnCode)
}
inline void CallResult::set_returncode(const void* value, size_t size) {
  
  returncode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.CallResult.returnCode)
}
inline ::std::string* CallResult::mutable_returncode() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallResult.returnCode)
  return returncode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallResult::release_returncode() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.CallResult.returnCode)
  
  return returncode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallResult::set_allocated_returncode(::std::string* returncode) {
  if (returncode != NULL) {
    
  } else {
    
  }
  returncode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), returncode);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.CallResult.returnCode)
}

// optional bytes gasRemaining = 3;
inline void CallResult::clear_gasremaining() {
  gasremaining_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallResult::gasremaining() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallResult.gasRemaining)
  return gasremaining_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallResult::set_gasremaining(const ::std::string& value) {
  
  gasremaining_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.CallResult.gasRemaining)
}
inline void CallResult::set_gasremaining(const char* value) {
  
  gasremaining_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.CallResult.gasRemaining)
}
inline void CallResult::set_gasremaining(const void* value, size_t size) {
  
  gasremaining_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.CallResult.gasRemaining)
}
inline ::std::string* CallResult::mutable_gasremaining() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallResult.gasRemaining)
  return gasremaining_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallResult::release_gasremaining() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.CallResult.gasRemaining)
  
  return gasremaining_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallResult::set_allocated_gasremaining(::std::string* gasremaining) {
  if (gasremaining != NULL) {
    
  } else {
    
  }
  gasremaining_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gasremaining);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.CallResult.gasRemaining)
}

// optional bytes gasRefund = 4;
inline void CallResult::clear_gasrefund() {
  gasrefund_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallResult::gasrefund() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallResult.gasRefund)
  return gasrefund_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallResult::set_gasrefund(const ::std::string& value) {
  
  gasrefund_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.CallResult.gasRefund)
}
inline void CallResult::set_gasrefund(const char* value) {
  
  gasrefund_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.CallResult.gasRefund)
}
inline void CallResult::set_gasrefund(const void* value, size_t size) {
  
  gasrefund_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.CallResult.gasRefund)
}
inline ::std::string* CallResult::mutable_gasrefund() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallResult.gasRefund)
  return gasrefund_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallResult::release_gasrefund() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.CallResult.gasRefund)
  
  return gasrefund_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallResult::set_allocated_gasrefund(::std::string* gasrefund) {
  if (gasrefund != NULL) {
    
  } else {
    
  }
  gasrefund_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gasrefund);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.CallResult.gasRefund)
}

// optional bool error = 5;
inline void CallResult::clear_error() {
  error_ = false;
}
inline bool CallResult::error() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallResult.error)
  return error_;
}
inline void CallResult::set_error(bool value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.CallResult.error)
}

// repeated .org.kframework.kevm.extvm.ModifiedAccount modifiedAccounts = 6;
inline int CallResult::modifiedaccounts_size() const {
  return modifiedaccounts_.size();
}
inline void CallResult::clear_modifiedaccounts() {
  modifiedaccounts_.Clear();
}
inline const ::org::kframework::kevm::extvm::ModifiedAccount& CallResult::modifiedaccounts(int index) const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallResult.modifiedAccounts)
  return modifiedaccounts_.Get(index);
}
inline ::org::kframework::kevm::extvm::ModifiedAccount* CallResult::mutable_modifiedaccounts(int index) {
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallResult.modifiedAccounts)
  return modifiedaccounts_.Mutable(index);
}
inline ::org::kframework::kevm::extvm::ModifiedAccount* CallResult::add_modifiedaccounts() {
  // @@protoc_insertion_point(field_add:org.kframework.kevm.extvm.CallResult.modifiedAccounts)
  return modifiedaccounts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::kframework::kevm::extvm::ModifiedAccount >*
CallResult::mutable_modifiedaccounts() {
  // @@protoc_insertion_point(field_mutable_list:org.kframework.kevm.extvm.CallResult.modifiedAccounts)
  return &modifiedaccounts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::kframework::kevm::extvm::ModifiedAccount >&
CallResult::modifiedaccounts() const {
  // @@protoc_insertion_point(field_list:org.kframework.kevm.extvm.CallResult.modifiedAccounts)
  return modifiedaccounts_;
}

// repeated bytes deletedAccounts = 7;
inline int CallResult::deletedaccounts_size() const {
  return deletedaccounts_.size();
}
inline void CallResult::clear_deletedaccounts() {
  deletedaccounts_.Clear();
}
inline const ::std::string& CallResult::deletedaccounts(int index) const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallResult.deletedAccounts)
  return deletedaccounts_.Get(index);
}
inline ::std::string* CallResult::mutable_deletedaccounts(int index) {
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallResult.deletedAccounts)
  return deletedaccounts_.Mutable(index);
}
inline void CallResult::set_deletedaccounts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.CallResult.deletedAccounts)
  deletedaccounts_.Mutable(index)->assign(value);
}
inline void CallResult::set_deletedaccounts(int index, const char* value) {
  deletedaccounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.CallResult.deletedAccounts)
}
inline void CallResult::set_deletedaccounts(int index, const void* value, size_t size) {
  deletedaccounts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.CallResult.deletedAccounts)
}
inline ::std::string* CallResult::add_deletedaccounts() {
  // @@protoc_insertion_point(field_add_mutable:org.kframework.kevm.extvm.CallResult.deletedAccounts)
  return deletedaccounts_.Add();
}
inline void CallResult::add_deletedaccounts(const ::std::string& value) {
  deletedaccounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.kframework.kevm.extvm.CallResult.deletedAccounts)
}
inline void CallResult::add_deletedaccounts(const char* value) {
  deletedaccounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.kframework.kevm.extvm.CallResult.deletedAccounts)
}
inline void CallResult::add_deletedaccounts(const void* value, size_t size) {
  deletedaccounts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.kframework.kevm.extvm.CallResult.deletedAccounts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CallResult::deletedaccounts() const {
  // @@protoc_insertion_point(field_list:org.kframework.kevm.extvm.CallResult.deletedAccounts)
  return deletedaccounts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CallResult::mutable_deletedaccounts() {
  // @@protoc_insertion_point(field_mutable_list:org.kframework.kevm.extvm.CallResult.deletedAccounts)
  return &deletedaccounts_;
}

// repeated bytes touchedAccounts = 8;
inline int CallResult::touchedaccounts_size() const {
  return touchedaccounts_.size();
}
inline void CallResult::clear_touchedaccounts() {
  touchedaccounts_.Clear();
}
inline const ::std::string& CallResult::touchedaccounts(int index) const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallResult.touchedAccounts)
  return touchedaccounts_.Get(index);
}
inline ::std::string* CallResult::mutable_touchedaccounts(int index) {
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallResult.touchedAccounts)
  return touchedaccounts_.Mutable(index);
}
inline void CallResult::set_touchedaccounts(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.CallResult.touchedAccounts)
  touchedaccounts_.Mutable(index)->assign(value);
}
inline void CallResult::set_touchedaccounts(int index, const char* value) {
  touchedaccounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.CallResult.touchedAccounts)
}
inline void CallResult::set_touchedaccounts(int index, const void* value, size_t size) {
  touchedaccounts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.CallResult.touchedAccounts)
}
inline ::std::string* CallResult::add_touchedaccounts() {
  // @@protoc_insertion_point(field_add_mutable:org.kframework.kevm.extvm.CallResult.touchedAccounts)
  return touchedaccounts_.Add();
}
inline void CallResult::add_touchedaccounts(const ::std::string& value) {
  touchedaccounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.kframework.kevm.extvm.CallResult.touchedAccounts)
}
inline void CallResult::add_touchedaccounts(const char* value) {
  touchedaccounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.kframework.kevm.extvm.CallResult.touchedAccounts)
}
inline void CallResult::add_touchedaccounts(const void* value, size_t size) {
  touchedaccounts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.kframework.kevm.extvm.CallResult.touchedAccounts)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CallResult::touchedaccounts() const {
  // @@protoc_insertion_point(field_list:org.kframework.kevm.extvm.CallResult.touchedAccounts)
  return touchedaccounts_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CallResult::mutable_touchedaccounts() {
  // @@protoc_insertion_point(field_mutable_list:org.kframework.kevm.extvm.CallResult.touchedAccounts)
  return &touchedaccounts_;
}

// repeated .org.kframework.kevm.extvm.LogEntry logs = 9;
inline int CallResult::logs_size() const {
  return logs_.size();
}
inline void CallResult::clear_logs() {
  logs_.Clear();
}
inline const ::org::kframework::kevm::extvm::LogEntry& CallResult::logs(int index) const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.CallResult.logs)
  return logs_.Get(index);
}
inline ::org::kframework::kevm::extvm::LogEntry* CallResult::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.CallResult.logs)
  return logs_.Mutable(index);
}
inline ::org::kframework::kevm::extvm::LogEntry* CallResult::add_logs() {
  // @@protoc_insertion_point(field_add:org.kframework.kevm.extvm.CallResult.logs)
  return logs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::kframework::kevm::extvm::LogEntry >*
CallResult::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:org.kframework.kevm.extvm.CallResult.logs)
  return &logs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::kframework::kevm::extvm::LogEntry >&
CallResult::logs() const {
  // @@protoc_insertion_point(field_list:org.kframework.kevm.extvm.CallResult.logs)
  return logs_;
}

// -------------------------------------------------------------------

// ModifiedAccount

// optional bytes address = 1;
inline void ModifiedAccount::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModifiedAccount::address() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.ModifiedAccount.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModifiedAccount::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.ModifiedAccount.address)
}
inline void ModifiedAccount::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.ModifiedAccount.address)
}
inline void ModifiedAccount::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.ModifiedAccount.address)
}
inline ::std::string* ModifiedAccount::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.ModifiedAccount.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModifiedAccount::release_address() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.ModifiedAccount.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModifiedAccount::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.ModifiedAccount.address)
}

// optional bytes nonce = 2;
inline void ModifiedAccount::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModifiedAccount::nonce() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.ModifiedAccount.nonce)
  return nonce_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModifiedAccount::set_nonce(const ::std::string& value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.ModifiedAccount.nonce)
}
inline void ModifiedAccount::set_nonce(const char* value) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.ModifiedAccount.nonce)
}
inline void ModifiedAccount::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.ModifiedAccount.nonce)
}
inline ::std::string* ModifiedAccount::mutable_nonce() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.ModifiedAccount.nonce)
  return nonce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModifiedAccount::release_nonce() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.ModifiedAccount.nonce)
  
  return nonce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModifiedAccount::set_allocated_nonce(::std::string* nonce) {
  if (nonce != NULL) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.ModifiedAccount.nonce)
}

// optional bytes balance = 3;
inline void ModifiedAccount::clear_balance() {
  balance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModifiedAccount::balance() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.ModifiedAccount.balance)
  return balance_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModifiedAccount::set_balance(const ::std::string& value) {
  
  balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.ModifiedAccount.balance)
}
inline void ModifiedAccount::set_balance(const char* value) {
  
  balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.ModifiedAccount.balance)
}
inline void ModifiedAccount::set_balance(const void* value, size_t size) {
  
  balance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.ModifiedAccount.balance)
}
inline ::std::string* ModifiedAccount::mutable_balance() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.ModifiedAccount.balance)
  return balance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModifiedAccount::release_balance() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.ModifiedAccount.balance)
  
  return balance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModifiedAccount::set_allocated_balance(::std::string* balance) {
  if (balance != NULL) {
    
  } else {
    
  }
  balance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), balance);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.ModifiedAccount.balance)
}

// repeated .org.kframework.kevm.extvm.StorageUpdate storageUpdates = 4;
inline int ModifiedAccount::storageupdates_size() const {
  return storageupdates_.size();
}
inline void ModifiedAccount::clear_storageupdates() {
  storageupdates_.Clear();
}
inline const ::org::kframework::kevm::extvm::StorageUpdate& ModifiedAccount::storageupdates(int index) const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.ModifiedAccount.storageUpdates)
  return storageupdates_.Get(index);
}
inline ::org::kframework::kevm::extvm::StorageUpdate* ModifiedAccount::mutable_storageupdates(int index) {
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.ModifiedAccount.storageUpdates)
  return storageupdates_.Mutable(index);
}
inline ::org::kframework::kevm::extvm::StorageUpdate* ModifiedAccount::add_storageupdates() {
  // @@protoc_insertion_point(field_add:org.kframework.kevm.extvm.ModifiedAccount.storageUpdates)
  return storageupdates_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::org::kframework::kevm::extvm::StorageUpdate >*
ModifiedAccount::mutable_storageupdates() {
  // @@protoc_insertion_point(field_mutable_list:org.kframework.kevm.extvm.ModifiedAccount.storageUpdates)
  return &storageupdates_;
}
inline const ::google::protobuf::RepeatedPtrField< ::org::kframework::kevm::extvm::StorageUpdate >&
ModifiedAccount::storageupdates() const {
  // @@protoc_insertion_point(field_list:org.kframework.kevm.extvm.ModifiedAccount.storageUpdates)
  return storageupdates_;
}

// optional bytes code = 5;
inline void ModifiedAccount::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModifiedAccount::code() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.ModifiedAccount.code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModifiedAccount::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.ModifiedAccount.code)
}
inline void ModifiedAccount::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.ModifiedAccount.code)
}
inline void ModifiedAccount::set_code(const void* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.ModifiedAccount.code)
}
inline ::std::string* ModifiedAccount::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.ModifiedAccount.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModifiedAccount::release_code() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.ModifiedAccount.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModifiedAccount::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.ModifiedAccount.code)
}

// -------------------------------------------------------------------

// StorageUpdate

// optional bytes offset = 1;
inline void StorageUpdate::clear_offset() {
  offset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageUpdate::offset() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.StorageUpdate.offset)
  return offset_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageUpdate::set_offset(const ::std::string& value) {
  
  offset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.StorageUpdate.offset)
}
inline void StorageUpdate::set_offset(const char* value) {
  
  offset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.StorageUpdate.offset)
}
inline void StorageUpdate::set_offset(const void* value, size_t size) {
  
  offset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.StorageUpdate.offset)
}
inline ::std::string* StorageUpdate::mutable_offset() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.StorageUpdate.offset)
  return offset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageUpdate::release_offset() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.StorageUpdate.offset)
  
  return offset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageUpdate::set_allocated_offset(::std::string* offset) {
  if (offset != NULL) {
    
  } else {
    
  }
  offset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), offset);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.StorageUpdate.offset)
}

// optional bytes data = 2;
inline void StorageUpdate::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StorageUpdate::data() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.StorageUpdate.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageUpdate::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.StorageUpdate.data)
}
inline void StorageUpdate::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.StorageUpdate.data)
}
inline void StorageUpdate::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.StorageUpdate.data)
}
inline ::std::string* StorageUpdate::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.StorageUpdate.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StorageUpdate::release_data() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.StorageUpdate.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StorageUpdate::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.StorageUpdate.data)
}

// -------------------------------------------------------------------

// LogEntry

// optional bytes address = 1;
inline void LogEntry::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry::address() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.LogEntry.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.LogEntry.address)
}
inline void LogEntry::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.LogEntry.address)
}
inline void LogEntry::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.LogEntry.address)
}
inline ::std::string* LogEntry::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.LogEntry.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry::release_address() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.LogEntry.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.LogEntry.address)
}

// repeated bytes topics = 2;
inline int LogEntry::topics_size() const {
  return topics_.size();
}
inline void LogEntry::clear_topics() {
  topics_.Clear();
}
inline const ::std::string& LogEntry::topics(int index) const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.LogEntry.topics)
  return topics_.Get(index);
}
inline ::std::string* LogEntry::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.LogEntry.topics)
  return topics_.Mutable(index);
}
inline void LogEntry::set_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.LogEntry.topics)
  topics_.Mutable(index)->assign(value);
}
inline void LogEntry::set_topics(int index, const char* value) {
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.LogEntry.topics)
}
inline void LogEntry::set_topics(int index, const void* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.LogEntry.topics)
}
inline ::std::string* LogEntry::add_topics() {
  // @@protoc_insertion_point(field_add_mutable:org.kframework.kevm.extvm.LogEntry.topics)
  return topics_.Add();
}
inline void LogEntry::add_topics(const ::std::string& value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.kframework.kevm.extvm.LogEntry.topics)
}
inline void LogEntry::add_topics(const char* value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.kframework.kevm.extvm.LogEntry.topics)
}
inline void LogEntry::add_topics(const void* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.kframework.kevm.extvm.LogEntry.topics)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LogEntry::topics() const {
  // @@protoc_insertion_point(field_list:org.kframework.kevm.extvm.LogEntry.topics)
  return topics_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LogEntry::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:org.kframework.kevm.extvm.LogEntry.topics)
  return &topics_;
}

// optional bytes data = 3;
inline void LogEntry::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry::data() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.LogEntry.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.kframework.kevm.extvm.LogEntry.data)
}
inline void LogEntry::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.kframework.kevm.extvm.LogEntry.data)
}
inline void LogEntry::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.kframework.kevm.extvm.LogEntry.data)
}
inline ::std::string* LogEntry::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.LogEntry.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry::release_data() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.LogEntry.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.LogEntry.data)
}

// -------------------------------------------------------------------

// VMQuery

// optional .org.kframework.kevm.extvm.GetAccount getAccount = 1;
inline bool VMQuery::has_getaccount() const {
  return query_case() == kGetAccount;
}
inline void VMQuery::set_has_getaccount() {
  _oneof_case_[0] = kGetAccount;
}
inline void VMQuery::clear_getaccount() {
  if (has_getaccount()) {
    delete query_.getaccount_;
    clear_has_query();
  }
}
inline  const ::org::kframework::kevm::extvm::GetAccount& VMQuery::getaccount() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.VMQuery.getAccount)
  return has_getaccount()
      ? *query_.getaccount_
      : ::org::kframework::kevm::extvm::GetAccount::default_instance();
}
inline ::org::kframework::kevm::extvm::GetAccount* VMQuery::mutable_getaccount() {
  if (!has_getaccount()) {
    clear_query();
    set_has_getaccount();
    query_.getaccount_ = new ::org::kframework::kevm::extvm::GetAccount;
  }
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.VMQuery.getAccount)
  return query_.getaccount_;
}
inline ::org::kframework::kevm::extvm::GetAccount* VMQuery::release_getaccount() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.VMQuery.getAccount)
  if (has_getaccount()) {
    clear_has_query();
    ::org::kframework::kevm::extvm::GetAccount* temp = query_.getaccount_;
    query_.getaccount_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void VMQuery::set_allocated_getaccount(::org::kframework::kevm::extvm::GetAccount* getaccount) {
  clear_query();
  if (getaccount) {
    set_has_getaccount();
    query_.getaccount_ = getaccount;
  }
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.VMQuery.getAccount)
}

// optional .org.kframework.kevm.extvm.GetStorageData getStorageData = 2;
inline bool VMQuery::has_getstoragedata() const {
  return query_case() == kGetStorageData;
}
inline void VMQuery::set_has_getstoragedata() {
  _oneof_case_[0] = kGetStorageData;
}
inline void VMQuery::clear_getstoragedata() {
  if (has_getstoragedata()) {
    delete query_.getstoragedata_;
    clear_has_query();
  }
}
inline  const ::org::kframework::kevm::extvm::GetStorageData& VMQuery::getstoragedata() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.VMQuery.getStorageData)
  return has_getstoragedata()
      ? *query_.getstoragedata_
      : ::org::kframework::kevm::extvm::GetStorageData::default_instance();
}
inline ::org::kframework::kevm::extvm::GetStorageData* VMQuery::mutable_getstoragedata() {
  if (!has_getstoragedata()) {
    clear_query();
    set_has_getstoragedata();
    query_.getstoragedata_ = new ::org::kframework::kevm::extvm::GetStorageData;
  }
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.VMQuery.getStorageData)
  return query_.getstoragedata_;
}
inline ::org::kframework::kevm::extvm::GetStorageData* VMQuery::release_getstoragedata() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.VMQuery.getStorageData)
  if (has_getstoragedata()) {
    clear_has_query();
    ::org::kframework::kevm::extvm::GetStorageData* temp = query_.getstoragedata_;
    query_.getstoragedata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void VMQuery::set_allocated_getstoragedata(::org::kframework::kevm::extvm::GetStorageData* getstoragedata) {
  clear_query();
  if (getstoragedata) {
    set_has_getstoragedata();
    query_.getstoragedata_ = getstoragedata;
  }
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.VMQuery.getStorageData)
}

// optional .org.kframework.kevm.extvm.GetCode getCode = 3;
inline bool VMQuery::has_getcode() const {
  return query_case() == kGetCode;
}
inline void VMQuery::set_has_getcode() {
  _oneof_case_[0] = kGetCode;
}
inline void VMQuery::clear_getcode() {
  if (has_getcode()) {
    delete query_.getcode_;
    clear_has_query();
  }
}
inline  const ::org::kframework::kevm::extvm::GetCode& VMQuery::getcode() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.VMQuery.getCode)
  return has_getcode()
      ? *query_.getcode_
      : ::org::kframework::kevm::extvm::GetCode::default_instance();
}
inline ::org::kframework::kevm::extvm::GetCode* VMQuery::mutable_getcode() {
  if (!has_getcode()) {
    clear_query();
    set_has_getcode();
    query_.getcode_ = new ::org::kframework::kevm::extvm::GetCode;
  }
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.VMQuery.getCode)
  return query_.getcode_;
}
inline ::org::kframework::kevm::extvm::GetCode* VMQuery::release_getcode() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.VMQuery.getCode)
  if (has_getcode()) {
    clear_has_query();
    ::org::kframework::kevm::extvm::GetCode* temp = query_.getcode_;
    query_.getcode_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void VMQuery::set_allocated_getcode(::org::kframework::kevm::extvm::GetCode* getcode) {
  clear_query();
  if (getcode) {
    set_has_getcode();
    query_.getcode_ = getcode;
  }
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.VMQuery.getCode)
}

// optional .org.kframework.kevm.extvm.GetBlockhash getBlockhash = 4;
inline bool VMQuery::has_getblockhash() const {
  return query_case() == kGetBlockhash;
}
inline void VMQuery::set_has_getblockhash() {
  _oneof_case_[0] = kGetBlockhash;
}
inline void VMQuery::clear_getblockhash() {
  if (has_getblockhash()) {
    delete query_.getblockhash_;
    clear_has_query();
  }
}
inline  const ::org::kframework::kevm::extvm::GetBlockhash& VMQuery::getblockhash() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.VMQuery.getBlockhash)
  return has_getblockhash()
      ? *query_.getblockhash_
      : ::org::kframework::kevm::extvm::GetBlockhash::default_instance();
}
inline ::org::kframework::kevm::extvm::GetBlockhash* VMQuery::mutable_getblockhash() {
  if (!has_getblockhash()) {
    clear_query();
    set_has_getblockhash();
    query_.getblockhash_ = new ::org::kframework::kevm::extvm::GetBlockhash;
  }
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.VMQuery.getBlockhash)
  return query_.getblockhash_;
}
inline ::org::kframework::kevm::extvm::GetBlockhash* VMQuery::release_getblockhash() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.VMQuery.getBlockhash)
  if (has_getblockhash()) {
    clear_has_query();
    ::org::kframework::kevm::extvm::GetBlockhash* temp = query_.getblockhash_;
    query_.getblockhash_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void VMQuery::set_allocated_getblockhash(::org::kframework::kevm::extvm::GetBlockhash* getblockhash) {
  clear_query();
  if (getblockhash) {
    set_has_getblockhash();
    query_.getblockhash_ = getblockhash;
  }
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.VMQuery.getBlockhash)
}

// optional .org.kframework.kevm.extvm.CallResult callResult = 5;
inline bool VMQuery::has_callresult() const {
  return query_case() == kCallResult;
}
inline void VMQuery::set_has_callresult() {
  _oneof_case_[0] = kCallResult;
}
inline void VMQuery::clear_callresult() {
  if (has_callresult()) {
    delete query_.callresult_;
    clear_has_query();
  }
}
inline  const ::org::kframework::kevm::extvm::CallResult& VMQuery::callresult() const {
  // @@protoc_insertion_point(field_get:org.kframework.kevm.extvm.VMQuery.callResult)
  return has_callresult()
      ? *query_.callresult_
      : ::org::kframework::kevm::extvm::CallResult::default_instance();
}
inline ::org::kframework::kevm::extvm::CallResult* VMQuery::mutable_callresult() {
  if (!has_callresult()) {
    clear_query();
    set_has_callresult();
    query_.callresult_ = new ::org::kframework::kevm::extvm::CallResult;
  }
  // @@protoc_insertion_point(field_mutable:org.kframework.kevm.extvm.VMQuery.callResult)
  return query_.callresult_;
}
inline ::org::kframework::kevm::extvm::CallResult* VMQuery::release_callresult() {
  // @@protoc_insertion_point(field_release:org.kframework.kevm.extvm.VMQuery.callResult)
  if (has_callresult()) {
    clear_has_query();
    ::org::kframework::kevm::extvm::CallResult* temp = query_.callresult_;
    query_.callresult_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void VMQuery::set_allocated_callresult(::org::kframework::kevm::extvm::CallResult* callresult) {
  clear_query();
  if (callresult) {
    set_has_callresult();
    query_.callresult_ = callresult;
  }
  // @@protoc_insertion_point(field_set_allocated:org.kframework.kevm.extvm.VMQuery.callResult)
}

inline bool VMQuery::has_query() const {
  return query_case() != QUERY_NOT_SET;
}
inline void VMQuery::clear_has_query() {
  _oneof_case_[0] = QUERY_NOT_SET;
}
inline VMQuery::QueryCase VMQuery::query_case() const {
  return VMQuery::QueryCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace extvm
}  // namespace kevm
}  // namespace kframework
}  // namespace org

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fmsg_2eproto__INCLUDED
